Entities and Relationships:
Person(1,n) --- HasContract --- Contract(1,1)
Team(0,n) --- HasTsponsorship --- T-Sponsorship(1,n)
Team(0,n) --- ContractWith --- Contract(1,1)
Team(0,n) --- HasCaptainHistory --- CaptainHistory(1,1)
T-Sponsorship(1,1) --- WithSponsor--- Sponsor(0,n)
Player(0,n)--- HasCaptainRole --- CaptainHistory(1,1)
Player(0,n) --- HasPSponsorship --- P-Sponsorship(1,n)
P-Sponsorship(1,1) --- WithSponsor --- Sponsor(0,n)
CoachingStaff(1,n) --- Trains --- Player(1,n)
Player --- ISA --- Person
CoachingStaff --- ISA --- Person
Manager --- ISA --- CoachingStaff

Attributes:
Team(teamID, name, city, kitColors, foundationYear)
T-Sponsorship(tSponsorshipID, startDate, endDate, type)
P-Sponsorship(pSponsorshipID, startDate, endDate, type)
Sponsor(sponsorID, name, industry, foundationYear)
CaptainHistory(startDate, endDate)
Contract(contractID, startDate, endDate, salary, jerseyNumber, position)
Manager(yearsOfExperience)
CoachingStaff(role)
Person(firstName, lastName, middleName, personID, dob, nationality)
Player(startingXI, appearances)

Primary Keys:
Team(teamID)
T-Sponsorship(tSponsorshipID)
P-Sponsorship(pSponsorshipID)
Sponsor(sponsorID)
CaptainHistory(captainHistoryID)
Contract(contractID)
Manager(personID)
CoachingStaff(personID)
Person(personID)
Player(personID)

Foreign Keys:
Team(teamID) --- References --- T-Sponsorship(teamID)
Team(teamID) --- References --- Contract(teamID)
Team(teamID) --- References --- CaptainHistory(teamID)
T-Sponsorship(tSponsorshipID) --- References --- Sponsor(tSponsorshipID)
CaptainHistory(captainHistoryID) --- References --- Player(captainHistoryID)
P-Sponsorship(pSponsorshipID) --- References --- Sponsor(pSponsorshipID)
CoachingStaff(personID) --- References --- Player(personID)
Manager(personID) --- References --- CoachingStaff(personID)
Person(personID) --- References --- Player(personID)
Person(personID) --- References --- CoachingStaff(personID)


Restructuring the ER Diagram:
Entities and Relationships:
Person(1,n) --- HasContract --- Contract(1,1)
Team(0,n) --- HasTsponsorship --- T-Sponsorship(1,n)
Team(0,n) --- ContractWith --- Contract(1,1)
Team(0,n) --- HasCaptainHistory --- CaptainHistory(1,1)
T-Sponsorship(1,1) --- TeamWithSponsor--- Sponsor(0,n)
Player(0,n)--- HasCaptainRole --- CaptainHistory(1,1)
Player(0,n) --- HasPSponsorship --- P-Sponsorship(1,n)
P-Sponsorship(1,1) --- PlayerWithSponsor --- Sponsor(0,n)
CoachingStaff(1,n) --- Trains --- Player(1,n)
Player(1,1) --- ISA-P-P --- Person(0,1)
CoachingStaff(1,1) --- ISA-CS-P --- Person(0,1)
Manager(1,1) --- ISA-M-CS --- CoachingStaff(0,1)
Team(1,n) --- HasKitColor --- KitColors(1,n)


General statements: We want to realize a database for football clubs, aiming to represent data related to a team; its players and their positions, captain history, coaching staff, manager, sponsor, and contracts between a team and a person. The database will track historical data for contracts, team memberships, and managerial positions over time.

Statements concerning teams: For the teams, we are interested in the team ID that uniquely identifies them together with the name. The city they are located in, the year of foundation, and kit colors are also of interest.

Statements concerning persons: For the persons, each of them is identified uniquely by an ID together with the name (some people might have the same name), we represent the date of birth and nationality. We want to keep track of the contract’s date, salary, jersey number, and position they have received over time with a team.

Statements concerning players: For the players, who are persons in a team, we are also interested in their startingXI status and the number of appearances they have made.

Statements concerning captain history: For the captain history, we want to keep track of the start and end dates of a player's captaincy.

Statements concerning coaching staff: For the coaching staff, who are also persons in a team, we are interested in their special roles in a team and the teamID to identify which team they belong to. Coaching staff members train multiple players, and each player is trained by multiple coaching staff members.

Statements concerning managers: For the managers, who are part of the coaching staff, we represent the years of experience.

Statements concerning team sponsorships (T-Sponsorship): For the team sponsorships, we are interested in the tSponsorshipID, start date, end date, and type of sponsorship.

Statements concerning player sponsorships (P-Sponsorship): For the player sponsorships, we are interested in the pSponsorshipID, start date, end date, and type of sponsorship.

Statements concerning sponsors: For the sponsors, we are interested in the sponsorID that uniquely identifies them, along with their name, industry, and foundation year. There can be sponsorship, either for a team or for a player.

Statements concerning contracts: For the contracts, we are interested in the contractID, start date, end date, salary, jersey number, and position. Each person in a team will have a contract, and we want to keep track of the contracts between a team and a person. Contracts can be associated with players or coaching staff, including managers.


I want to design a historicized football club database that respects the following requirements
-It should be based on a domain containing between 6 and 10 main conceptual entities (i.e., without counting sub-entities that appear in ISAs or generalizations).
-There should be some structure in the set of entities, i.e., the ER schema should in addition contain a few ISAs and/or generalizations.
-There should be sufficient structure in the relationships, which usually means that the representation of the ER schema as a graph (where the nodes are given by the entities and relationships, and the edges are given by the participation of entities in relationships) should contain some cycles.
-The schema should contain cardinality constraints on the participation of entities to relationships that are different from the default (0,n).
-The schema should contain some identifiers made of multiple attributes, and at least one external identification for some entity.
-The schema should contain at least one optional attribute and at least one multi-valued attribute.
-There should be some external constraints, that cannot be represented in the ER model.
-The specification should include an indication about the volumes for the various entities and relationships (pay attention to the coherence between the volumes and the cardinality constraints of the ER schema).
-The specification should include a workload of the most common queries and operations (between 5 and 10) that are of interest in the modeled domain, with an indication of their frequency.

The student should carry out the design of the database according to the requirements, following the methodology presented in the course, and consisting of the following phases:
Conceptual design, producing the following documents:
structured and organized requirements;
glossary of terms (typically optional, but required for this project);
diagram of the conceptual schema;
data dictionary of the conceptual schema (listing the entities, relationships, and external constraints - the data dictionary for the attributes can be omitted);
table of volumes and table of operations according to the foreseen application load.
Restructuring of the conceptual schema, producing the restructured conceptual schema (diagram and data dictionary), the corresponding table of volumes, and the access tables to assess the cost of the various operations.
Direct translation to the relational model, producing the relational schema with external constraints and the specification of the application load in terms of the relational schema.
Restructuring of the relational schema taking into account the application load, producing the restructured relational schema with external constraints and the specification of the application load in terms of the restructured relational schema. The reasons for the restructuring steps on the relational schema should be stated explicitly, by referring to the operations and the corresponding access tables.
Specification of the database in SQL, by defining relations with suitable constraints (capturing keys, foreign keys, and tuple constraints) and stored procedures with triggers to implement additional constraints (inclusions, external constraints).



We have worked on the conceptual schema and the restructuring of it and now we doing the direct translation to the relational model.


r


Glossary of terms
Term Description Synonyms Connections
Team
A collection of team per-
sonnel, including players,
manager, and coaching
staff.
Football team,
Club
Contract,
Captain History,
T-Sponsorship
Person A member of a team. Member, Individual
Player, Manager,
Coaching Staff,
Contract
Player A person who plays for a
team. Footballer
Team, Person,
P-Sponsorsip,
Coaching Staff,
CaptainHistory
Coaching Staff
A person who is a non-
playing team member
listed on the official team
list.
Trainers, Technical
Staff
Player, Person,
Manager
Manager A coaching staff member
who manages a team. Head Coach Team, Person,
Coaching Staff
Contract
A legal agreement be-
tween a team and a per-
son.
Agreement, Deal Team, Person
CaptainHistory
A record of the players
who have been captain of
a team.
Captaincy record,
Captain’s term Team, Player
Sponsor
A company or organiza-
tion that provides funds to
a team or player.
Official Sponsor,
Partner
P-Sponsorship, T-
Sponsorship
T-Sponsorship
An agreement where a
sponsor provides funds to
a team.
Team Sponsorship, Sponsor, Team
P-Sponsorship
An agreement where a
sponsor provides funds to
a player.
Player Sponsorship Sponsor, Player

Data dictionaries
Data dictionary: Entities
Entity Description Attributes Identifiers
Team Represents a football
team
name
teamID
city
foundationYear
kitColors
{teamID}
Person Represents a person in-
volved in a football club
personID
dob
nationality
name (firstName,
middleName,
lastName)
{personID}
Player Represents a player in a
team.
startingXI
appearances {personID}
CaptainHistory Represents a captain of a
team.
startDate
endDate {startDate}
Contract
Represents an agreement
between a person and a
team.
contractID
startDate
endDate
salary
jerseyNumber
position
{contractID}
CoachingStaff Represents a coaching
staff member of a team role {personID}
Manager Represents a manager of a
team yearsOfExperience {personID}
Sponsor Represents a sponsor for a
team,or a player
name
industry
sponsorID
industry
foundationYear
{sponsorID}
T-Sponsorship
Represents an agreement
between a team and a
sponsor
tSponsorshipID
startDate
endDate
type
{tSponsorshipID,
Sponsor}
P-Sponsorship
Represents an agreement
between a player and a
sponsor
pSponsorshipID
startDate
endDate
type
{pSponsorshipID,
Sponsor}

Data dictionary: Relationships
Relationship Description Components Attributes Identifiers
HasContract
Connects a person with a
contract. It represents the
contract a person has.
Person,
Contract
HasTSponsorship
Connects a team with
its sponsorship agreement.
It represents the sponsor-
ship agreement a team has
with a sponsor.
Team,
T-Sponsorship,
HasPSponsorship
Connects a player with its
sponsorship agreement. It
represents the sponsorship
agreement a player has
with a sponsor.
Player,
P-Sponsorship
HasCaptainHistory
Connects a team with its
captain history records. It
represents the history of
captains for a team.
Team,
CaptainHistory
HasCaptainRole
Connects a player with
their captain role. It rep-
resents the captain role of
a player.
Player,
CaptainHistory
WithSponsor
Connects a T-Sponsorship
or P-Sponsorship with a
sponsor. It represents
the relationship between
a sponsor and a sponsor-
ship.
T-Sponsorship/P-
Sponsorship,
Sponsor
Trains
Connects a coaching staff
member with the players
they train.
Coaching Staff,
Player


Table of volumes and operations
Table of Volumes
Concept Construct Volume
Team Entity 50
Person Entity 1400
Player Entity 1250
CoachingStaff Entity 150
Manager Entity 50
Sponsor Entity 100
Contract Entity 1400
CaptainHistory Entity 50
T-Sponsorship Entity 200
P-Sponsorship Entity 300
ContractWith Relationship 1400
HasContract Relationship 1400
Trains Relationship 150
HasCaptainHistory Relationship 50
HasCaptainRole Relationship 50
HasPSponsorship Relationship 1250
HasTSponsorship Relationship 200
TeamWithSponsor Relationship 200
PlayerWithSponsor Relationship 300


Restructuring the ER Diagram:
Entities and Relationships:
Person(1,n) --- HasContract --- Contract(1,1)
Team(0,n) --- HasTsponsorship --- T-Sponsorship(1,n)
Team(0,n) --- ContractWith --- Contract(1,1)
Team(0,n) --- HasCaptainHistory --- CaptainHistory(1,1)
T-Sponsorship(1,1) --- TeamWithSponsor--- Sponsor(0,n)
Player(0,n)--- HasCaptainRole --- CaptainHistory(1,1)
Player(0,n) --- HasPSponsorship --- P-Sponsorship(1,n)
P-Sponsorship(1,1) --- PlayerWithSponsor --- Sponsor(0,n)
CoachingStaff(1,n) --- Trains --- Player(1,n)
Player(1,1) --- ISA-P-P --- Person(0,1)
CoachingStaff(1,1) --- ISA-CS-P --- Person(0,1)
Manager(1,1) --- ISA-M-CS --- CoachingStaff(0,1)



Restructured data dictionary

Restructured data dictionary: Entities
Entity Description Attributes Identifiers
Team
Represents a football
team
name
teamID
city
foundationYear
kitColors
{teamID}
Person
Represents a person involved
in a football club
personID
dob
nationality
name (firstName,
middleName,
lastName)
{personID}
Player
Represents a player in a
team.
startingXI
appearances
{personID}
CaptainHistory
Represents a captain of a
team.
startDate
endDate
{startDate}
Contract
Represents an agreement
between a person and a
team.
contractID
startDate
endDate
salary
jerseyNumber
position
{contractID}
CoachingStaff
Represents a coaching
staff member of a team
role {personID}
Manager
Represents a manager of a
team
yearsOfExperience {personID}
Sponsor
Represents a sponsor for a
team,or a player
name
industry
sponsorID
industry
foundationYear
{sponsorID}
T-Sponsorship
Represents an agreement
between a team and a
sponsor
tSponsorshipID
startDate
endDate
type
{tSponsorshipID,
Sponsor}
P-Sponsorship
Represents an agreement
between a player and a
sponsor
pSponsorshipID
startDate
endDate
type
{pSponsorshipID,
Sponsor}
KitColor
Represents the kit colors
of a team
kitColorID
color
typeOfKit
{kitColorID}

Restructured data dictionary: Relationships
Relationship Description Components Attributes Identifiers
HasContract
Connects a person with a
contract. It represents the
contract a person has.
Person,
Contract
{contractID,
personID}
ContractWith
Connects a Team with
contracts. It represents
the contracts a Team has.
Team,
Contract
{contractID,
teamID}
HasTSponsorship
Connects a team with
its sponsorship agreement.
It represents the sponsorship
agreement a team has
with a sponsor.
Team,
T-Sponsorship
{teamID,
tSponsorshipID}
HasPSponsorship
Connects a player with its
sponsorship agreement. It
represents the sponsorship
agreement a player has
with a sponsor.
Player,
P-Sponsorship
{playerID,
pSponsorshipID}
HasCaptainHistory
Connects a team with its
captain history records. It
represents the history of
captains for a team.
Team,
CaptainHistory
{teamID}
HasCaptainRole
Connects a player with
their captain role. It represents
the captain role of
a player.
Player,
CaptainHistory
{playerID}
PlayerWithSponsor
Connects a P-Sponsorship
with a sponsor. It represents
the relationship between
a sponsor and a
sponsorship.
P-Sponsorship,
Sponsor
{pSponsorshipID,
sponsorID}
Relationship Description Components Attributes Identifiers
TeamWithSponsor
Connects a T-Sponsorship
with a sponsor. It represents
the relationship between
a sponsor and a
sponsorship.
T-Sponsorship,
Sponsor
{tSponsorshipID,
sponsorID}
Trains
Connects a coaching staff
member with the players
they train.
Coaching Staff,
Player
{coachingStaffID,
playerID}
ISA-P-P
Connects a Person to a
Player.
Person,
Player
{personID}
ISA-CS-P
Connects a Person to a
Coaching Staff.
Coaching Staff,
Person
{personID}
ISA-M-CS
Connects a Coaching Staff
to a Manager.
Coaching Staff,
Manager
{coachingStaffID}
HasKitColor
Connects a Coaching Staff
to a Manager.
Coaching Staff,
Manager
{teamID,
kitColorID}


Restructured table of volumes and operations
Restructured table of volumes
Concept Construct Volume
Team Entity 50
Person Entity 1400
Player Entity 1250
CoachingStaff Entity 150
Manager Entity 50
Sponsor Entity 100
Contract Entity 1400
CaptainHistory Entity 50
T-Sponsorship Entity 200
P-Sponsorship Entity 300
KitColor Entity 300
ContractWith Relationship 1400
HasContract Relationship 1400
Trains Relationship 150
HasCaptainHistory Relationship 50
HasCaptainRole Relationship 50
HasPSponsorship Relationship 1250
HasTSponsorship Relationship 200
TeamWithSponsor Relationship 200
PlayerWithSponsor Relationship 300
ISA-P-P Relationship 1250
ISA-CS-P Relationship 150
ISA-M-CS Relationship 50
HasKitColor Relationship 150


Operations of interest:
1. Insert a new player to a team.
2. Update team’s coaching staff (including manager).
3. Update player’s contract.
4. Assign a new captain.
5. Insert a new sponsorship (team or player).
6. Retrieve team’s players.
7. Retrieve a player’s contract.
8. List all sponsorships for a player.
9. List all sponsorships for a team.
10. Transfer of a player to another team.
Table of Operations
Operation Type Frequency
1 Interactive 10/month
2 Interactive 3/month
3 Interactive 20/month
4 Interactive 1/year
5 Interactive 5/month
6 Interactive 100/day
7 Interactive 50/day
8 Batch 10/month
9 Batch 1/week
10 Interactive 2/year

2.4 Access tables
We assume that a write access costs like two read accesses in the total cost evaluation.
Access table for Operation 1
Concept Construct Accesses Type
Person Entity 1 W
Player Entity 1 W
Contract Entity 1 W
HasContract Relationship 1 W
ContractWith Relationship 1 W
ISA-P-P Relationship 1 W
Total: 6*10 write accesses = 120 accesses per month
Access table for Operation 2a (Coaching Staff)
Concept Construct Accesses Type
Person Entity 1 W
CoachingStaff Entity 1 W
ISA-CS-P Entity 1 W
Trains Entity 1 W
Total: 4*3 write accesses = 24 accesses per month
Access table for Operation 2b (Manager)
Concept Construct Accesses Type
Person Entity 1 W
Coaching Staff Entity 1 W
Manager Entity 1 W
ISA-M-CS Entity 1 W
ISA-CS-P Entity 1 W
Trains Entity 1 W
Total: 6*3 write accesses = 36 accesses per month
Access table for Operation 3
Concept Construct Accesses Type
Person Entity 1 R
Player Entity 1 R
Player Entity 1 W
Contract Entity 1 R
Contract Entity 1 W
HasContract Relationship 1 W
ContractWith Relationship 1 W
ISA-P-P Relationship 1 R
Total: 4 write accesses + 4 read accesses = 12 accesses per operation
Total accesses per month: 12 accesses * 20 operations/month = 240 accesses per month
Access table for Operation 4
Concept Construct Accesses Type
Person Entity 1 R
Player Entity 1 R
Contract Entity 1 R
HasContract Relationship 1 R
CaptainHistory Entity 1 W
HasCaptainRole Relationship 1 W
HasCaptainHistory Relationship 1 W
Total: 6 read accesses + 3 write accesses = 12 accesses
Total accesses per year: 12 accesses * 1 = 12 accesses/year
Access table for Operation 5a (Team sponsorship)
Concept Construct Accesses Type
Sponsor Entity 1 R
Sponsor Entity 1 W
T-Sponsorship Entity 1 W
HasTSponsorship Entity 1 W
TeamWithSponsor Relationship 1 W
Team Entity 1 R
Total: 4 read accesses + 3 write accesses = 10 accesses
Total accesses per month: 10 accesses * 5 operations/month = 50 accesses/month
Access table for Operation 5b (Player sponsorship)
Concept Construct Accesses Type
Sponsor Entity 1 R
Sponsor Entity 1 W
P-Sponsorship Entity 1 W
HasPSponsorship Entity 1 W
PlayerWithSponsor Relationship 1 W
Player Entity 1 R
Total: 4 read accesses + 3 write accesses = 10 accesses
Total accesses per month: 10 accesses * 5 operations/month = 50 accesses/month
Access table for Operation 6
Concept Construct Accesses Type
Team Entity 1 R
ContractWith Relationship 1 R
Contract Entity 25* R
Player Entity 25* R
Person Entity 25* R
ISA-P-P Relationship 25* R
* We assume that an average team has 25 players.
Total: 2 + 4*25 read accesses per operation = 102 accesses
Total accesses per day: 102 accesses * 100 operations/day = 10,200 accesses per day
Access table for Operation 7
Concept Construct Accesses Type
Player Entity 1 R
Person Entity 1 R
ISA-P-P Relationship 1 R
HasContract Relationship 1 R
Contract Entity 1 R
ContractWith Relationship 1 R
Team Entity 1 R
Total: 7 accesses * 50 operations/day = 350 accesses per day.
Access table for Operation 8
Concept Construct Accesses Type
Player Entity 1 R
Person Entity 1 R
ISA-P-P Relationship 1 R
HasPSponsorship Relationship 1 R
P-Sponsorship Entity 3* R
PlayerWithSponsor Relationship 3* R
Sponsor Entity 3* R
* We assume that a Player has an average of 25 players.
Total: 4 read accesses + 3*3 read accesses = 13 accesses
Total accesses per month: 13 accesses * 10 operations/month = 130 accesses per month.
Access table for Operation 9
Concept Construct Accesses Type
Team Entity 1 R
HasTSponsorship Relationship 4* R
T-Sponsorship Entity 4* R
TeamWithSponsor Relationship 4* R
Sponsor Entity 4* R
* We assume that a Team has an average of 4 sponsorships.
Total: 1 read access + 4*4 read accesses = 17 accesses
Total accesses per week: 17 accesses * 1 operation/month = 17 accesses per week.
Access table for Operation 10
Concept Construct Accesses Type
Contract Entity 1 R
Contract Entity 1 W
Player Entity 1 R
Player Entity 1 W
Team Entity 1 R
Person Entity 1 R
ISA-P-P Relationship 1 R
ContractWith Relationship 1 W
HasContract Relationship 1 W
* We assume that a Team has an average of 4 sponsorships.
Total: 5 read accesses + 4 write accesses = 13 accesses
Total accesses per year: 13 accesses * 2 operations/year = 26 accesses per year.

3 Direct translation
3.1 Relational schema
Team(teamID,name,city,foundationYear)
inclusion: Team[teamID] ⊆ HasKitColor[teamID]
Person(personID,firstName,middleName,lastName,dob,nationality)
inclusion: Person[personID] ⊆ HasContract[personID]
Player(playerID,startingXI,appearances)
foreign key: Player[playerID] ⊆ Person[personID]
inclusion: Player[playerID] ⊆ Trains[playerID]
constraint: appearances ⩾ 0
CoachingStaff(coachingStaffID,role)
foreign key: CoachingStaff[coachingStaffID] ⊆ Person[personID]
inclusion: CoachingStaff[coachingStaffID] ⊆ Trains[coachingStaffID]
Manager(managerID,yearsOfExperience)
foreign key: Manager[managerID] ⊆ CoachingStaff[coachingStaffID]
Contract(contractID,person,team,startDate,endDate,salary,jerseyNumber*,position*)
foreign key: Contract[person] ⊆ Person[personID]
foreign key: Contract[team] ⊆ Team[teamID]
constraint: jerseyNumber and position is NULL if Person is not Player
constraint: jerseyNumber ⩾ 1 and ⩽ 99
constraint: endDate > startDate
Sponsor(sponsorID,name,industry,foundationYear)
P-Sponsorship(pSponsorshipID,sponsor,startDate,endDate,type)
foreign key: P-Sponsorship[sponsor] ⊆ Sponsor[sponsorID]
T-Sponsorship(tSponsorshipID,sponsor,startDate,endDate,type)
foreign key: T-Sponsorship[sponsor] ⊆ Sponsor[sponsorID]
CaptainHistory(startDate,player,team,endDate)
foreign key: CaptainHistory[player] ⊆ Player[playerID]
foreign key: CaptainHistory[team] ⊆ Team[teamID]
KitColor(kitColorID,color,typeOfKit)
foreign key: KitColor[kitColorID] ⊆ HasKitColor[kitColorID]
constraint: typeOfKit is ’Home Kit’ or ’Away Kit’ or ’Alternate Kit’
ContractWith(contractID,teamID)
foreign key: ContractWith[contractID] ⊆ Contract[teamID]
foreign key: ContractWith[teamID] ⊆ Person[teamID]
HasContract(contractID,personID)
foreign key: HasContract[contractID] ⊆ Contract[teamID]
foreign key: HasContract[personID] ⊆ Person[personID]
Trains(coachingStaffID,playerID)
foreign key: Trains[coachingStaffID] ⊆ CoachingStaff[coachingStaffID]
foreign key: Trains[playerID] ⊆ Person[playerID]
HasTSponsorship(teamID,tSponsorshipID)
foreign key: HasTSponsorship[teamID] ⊆ Team[teamID]
foreign key: HasTSponsorship[tSponsorshipID] ⊆ P-Sponsor[tSponsorshipID]
HasPSponsorship(teamID,pSponsorshipID)
foreign key: HasPSponsorship[teamID] ⊆ Team[teamID]
foreign key: HasPSponsorship[pSponsorshipID] ⊆ P-Sponsor[pSponsorshipID]
HasCaptainHistory(teamID)
foreign key: HasCaptainHistory([teamID] ⊆ Team[teamID]
HasCaptainRole(playerID)
foreign key: HasCaptainRole[playerID] ⊆ Player[playerID]
PlayerWithSponsor(pSponsorshipID,sponsorID)
foreign key: PlayerWithSponsor[pSponsorshipID] ⊆ P-Sponsorship[pSponsorshipID]
foreign key: PlayerWithSponsor[sponsorID] ⊆ Sponsor[sponsorID]
TeamWithSponsor(tSponsorshipID,sponsorID)
foreign key: TeamWithSponsor[tSponsorshipID] ⊆ T-Sponsorship[tSponsorshipID]
foreign key: TeamWithSponsor[sponsorID] ⊆ Sponsor[sponsorID]
HasKitColor(kitColorID,teamID)
foreign key: HasKitColor[kitColorID] ⊆ KitColor[kitColorID]
foreign key: HasKitColor[teamID] ⊆ Team[teamID]